			+--------------------+
			|        MS 110      |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+
				   
---- GROUP ----

Zonghan Yang    <fstqwq@sjtu.edu.cn>
Yuheng Zhang    <yveh1999@sjtu.edu.cn>
Yunqing Li      <lyq_cs_sjtu@sjtu.edu.cn>
Yi Wang         <refraction334@sjtu.edu.cn>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

Yuxuan Chen, Yonghao Zhuang for helping understanding code.

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Added to struct thread:
    int sleep_remain;                   /* Positive ; Time to sleep */

---- ALGORITHMS ----
>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

    Record the time needed to sleep, then turn off the interrupt and block this thread, try to switch to another process.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

    Use O(# sleeping threads) to check if the sleep time of every sleeing thread is exhausted, if so, wake it up.


---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

    Disable interruption.

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

    Disable interruption.


---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

    It's straightforward.

			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Added to struct thread:
    struct list lock_list;              /* Locks owned */
    int max_donate_delta;               /* Max Donate = priority + delta */
    int priority_to_set;                /* Priority to be set when donation is enabled. */
    struct thread *father;              /* Lock father this thread. */
    struct list_elem donate_elem;       /* Donation list of locks. */
Added to struct lock:
    int max_donate_delta;       /* Max donate delta for holder */
    struct list donaters;       /* List of donaters */
    struct list_elem elem;      /* Element to present in list */

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

    L ---> L1 ---> M ---> L2 ---> H


---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

    list_min() to find highest priority in ready_list.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

    Check if it's waiting for a lower priority lock holder. If so, donate priority to it.

    If it's nested, do it recursively.

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

    Recalculate the priority, and do it recursively if nessasery.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

    Access priority the same time and concurrently modified it.
    Disable interruption.
    No, dead locks are possible in the situation.

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

    It's quite hard to keep ready list sorted. I failed on trying it.
    So instead I choose to use find_min() every time.



			  ADVANCED SCHEDULER
			  ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

/*
 * [31 sgn][30:14 int][13:0 point]
 * value = num / FLOAT_POINT;
 */

struct fixed32 {
  int32_t num;
};

const int FLOAT_POINT = 1 << 14;

Added to thread:
    int nice;                           /* Nice value. */       
    struct fixed32 recent_cpu;          /* Recent CPU. */

static struct fixed32 load_avg;


---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu      priority        thread
ticks   A   B   C     A      B     C   to run
-----  --  --   --   ---   ---   ---   ------
0      0   0    0   63    61    59      A
4      4   0    0   62    61    59      A
8      8   0    0   61    61    59      A
12     12  0    0   60    61    59      B
16     12  4    0   60    60    59      B
20     12  8    0   60    59    59      A
24     16  8    0   59    59    59      A
28     20  8    0   58    59    59      C
32     20  8    4   58    59    58      B
36     20  12   4   58    58    58      B

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

    The order of thread_update_recent_cpu(), thread_update_load_avg(), thread_update_priority() is undetermined.

    We call thread_update_recent_cpu(), thread_update_load_avg() before thread_update_priority().

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

    All except switch threads are running in interruption enabled mode.
    So it will not be likely to steal much time from user processes.


---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

    We do not store the effective priority. Instead, using a function
    thread_get_certain_priority() to conveniently get priority whether
    it's mlfqs or not. It may cost a little more time, but it makes the
    code clean.

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

    Yes, we created a fixed32 struct. It's clear and easy to read code
    using it without knowing how it works.